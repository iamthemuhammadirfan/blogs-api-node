name: Blog API CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        run: yarn lint

      - name: Run unit tests
        run: yarn test:unit

      - name: Generate test coverage
        run: yarn test:coverage
        if: matrix.node-version == '20.x'

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: blog-api-coverage

  # Only run build job if lint-and-test passes
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Verify application can start
        run: |
          timeout 30s yarn start &
          APP_PID=$!
          sleep 15
          # Test health endpoint
          curl -f http://localhost:3000/api/health || (echo "Health check failed" && exit 1)
          # Test Swagger docs
          curl -f http://localhost:3000/api-docs || (echo "API docs not accessible" && exit 1)
          kill $APP_PID || true
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/blog_api_test

  # Security audit for PRs
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run security audit
        run: yarn audit --level moderate

      - name: Check for known vulnerabilities
        run: |
          echo "Checking for security vulnerabilities..."
          yarn audit --json > audit-results.json || true
          if grep -q '"type":"auditAdvisory"' audit-results.json; then
            echo "⚠️ Security vulnerabilities found:"
            cat audit-results.json | jq '.data.advisory | select(.severity == "high" or .severity == "critical")'
            exit 1
          else
            echo "✅ No high/critical security vulnerabilities found"
          fi
